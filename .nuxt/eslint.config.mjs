// ESLint config generated by Nuxt
/// <reference path="./eslint-typegen.d.ts" />
/* eslint-disable */
// @ts-nocheck

import typegen from '../node_modules/eslint-typegen/dist/index.mjs';
import { createConfigForNuxt, defineFlatConfigs, resolveOptions } from '../node_modules/@nuxt/eslint-config/dist/flat.mjs';
import { fileURLToPath } from 'url';

const r = (...args) => fileURLToPath(new URL(...args, import.meta.url))

export { defineFlatConfigs }

export const options = resolveOptions({
  features: {
  "standalone": true,
  "stylistic": {
    "quotes": "double",
    "semi": true
  }
},
  dirs: {
    pages: ["app/pages"],
    composables: ["app/composables", "app/utils"],
    components: ["app/components"],
    componentsPrefixed: [],
    layouts: ["app/layouts"],
    plugins: ["app/plugins"],
    middleware: ["app/middleware"],
    modules: ["modules"],
    servers: [],
    root: [],
    src: ["app"],
}
})

export const configs = createConfigForNuxt(options)

configs.append(
// Set globals from imports registry
{
  name: 'nuxt/import-globals',
  languageOptions: {
    globals: Object.fromEntries(["useScriptTriggerConsent","useScriptEventPage","useScriptTriggerElement","useScript","useScriptGoogleAnalytics","useScriptPlausibleAnalytics","useScriptCrisp","useScriptClarity","useScriptCloudflareWebAnalytics","useScriptFathomAnalytics","useScriptMatomoAnalytics","useScriptGoogleTagManager","useScriptGoogleAdsense","useScriptSegment","useScriptMetaPixel","useScriptXPixel","useScriptIntercom","useScriptHotjar","useScriptStripe","useScriptLemonSqueezy","useScriptVimeoPlayer","useScriptYouTubePlayer","useScriptGoogleMaps","useScriptNpm","useScriptUmamiAnalytics","useScriptSnapchatPixel","useScriptRybbitAnalytics","isVue2","isVue3","defineNuxtLink","useNuxtApp","tryUseNuxtApp","defineNuxtPlugin","definePayloadPlugin","useRuntimeConfig","defineAppConfig","useAppConfig","updateAppConfig","defineNuxtComponent","useAsyncData","useLazyAsyncData","useNuxtData","refreshNuxtData","clearNuxtData","useHydration","callOnce","useState","clearNuxtState","clearError","createError","isNuxtError","showError","useError","useFetch","useLazyFetch","useCookie","refreshCookie","onPrehydrate","prerenderRoutes","useRequestHeader","useRequestHeaders","useResponseHeader","useRequestEvent","useRequestFetch","setResponseStatus","onNuxtReady","preloadComponents","prefetchComponents","preloadRouteComponents","abortNavigation","addRouteMiddleware","defineNuxtRouteMiddleware","setPageLayout","navigateTo","useRoute","useRouter","isPrerendered","loadPayload","preloadPayload","definePayloadReducer","definePayloadReviver","useLoadingIndicator","getAppManifest","getRouteRules","reloadNuxtApp","useRequestURL","usePreviewMode","useRouteAnnouncer","useRuntimeHook","useHead","useHeadSafe","useServerHeadSafe","useServerHead","useSeoMeta","useServerSeoMeta","injectHead","onBeforeRouteLeave","onBeforeRouteUpdate","withCtx","withDirectives","withKeys","withMemo","withModifiers","withScopeId","onActivated","onBeforeMount","onBeforeUnmount","onBeforeUpdate","onDeactivated","onErrorCaptured","onMounted","onRenderTracked","onRenderTriggered","onServerPrefetch","onUnmounted","onUpdated","computed","customRef","isProxy","isReactive","isReadonly","isRef","markRaw","proxyRefs","reactive","readonly","ref","shallowReactive","shallowReadonly","shallowRef","toRaw","toRef","toRefs","triggerRef","unref","watch","watchEffect","watchPostEffect","watchSyncEffect","isShallow","effect","effectScope","getCurrentScope","onScopeDispose","defineComponent","defineAsyncComponent","resolveComponent","getCurrentInstance","h","inject","hasInjectionContext","nextTick","provide","mergeModels","toValue","useModel","useAttrs","useCssModule","useCssVars","useSlots","useTransitionState","useId","useTemplateRef","useShadowRoot","Component","ComponentPublicInstance","ComputedRef","DirectiveBinding","ExtractDefaultPropTypes","ExtractPropTypes","ExtractPublicPropTypes","InjectionKey","PropType","Ref","MaybeRef","MaybeRefOrGetter","VNode","WritableComputedRef","requestIdleCallback","cancelIdleCallback","setInterval","computedAsync","asyncComputed","computedEager","eagerComputed","computedInject","computedWithControl","controlledComputed","createEventHook","createGlobalState","createInjectionState","createRef","createReusableTemplate","createSharedComposable","createTemplatePromise","createUnrefFn","extendRef","injectLocal","isDefined","makeDestructurable","onClickOutside","onElementRemoval","onKeyStroke","onLongPress","onStartTyping","provideLocal","reactify","createReactiveFn","reactifyObject","reactiveComputed","reactiveOmit","reactivePick","refAutoReset","autoResetRef","refDebounced","debouncedRef","refDefault","refThrottled","throttledRef","refWithControl","controlledRef","syncRef","syncRefs","templateRef","toReactive","resolveRef","resolveUnref","tryOnBeforeMount","tryOnBeforeUnmount","tryOnMounted","tryOnScopeDispose","tryOnUnmounted","unrefElement","until","useActiveElement","useAnimate","useArrayDifference","useArrayEvery","useArrayFilter","useArrayFind","useArrayFindIndex","useArrayFindLast","useArrayIncludes","useArrayJoin","useArrayMap","useArrayReduce","useArraySome","useArrayUnique","useAsyncQueue","useAsyncState","useBase64","useBattery","useBluetooth","useBreakpoints","useBroadcastChannel","useBrowserLocation","useCached","useClipboard","useClipboardItems","useCloned","useConfirmDialog","useCountdown","useCounter","useCssVar","useCurrentElement","useCycleList","useDark","useDateFormat","useDebouncedRefHistory","useDebounceFn","useDeviceMotion","useDeviceOrientation","useDevicePixelRatio","useDevicesList","useDisplayMedia","useDocumentVisibility","useDraggable","useDropZone","useElementBounding","useElementByPoint","useElementHover","useElementSize","useElementVisibility","useEventBus","useEventListener","useEventSource","useEyeDropper","useFavicon","useFileDialog","useFileSystemAccess","useFocus","useFocusWithin","useFps","useFullscreen","useGamepad","useGeolocation","useIdle","useInfiniteScroll","useIntersectionObserver","useInterval","useIntervalFn","useKeyModifier","useLastChanged","useLocalStorage","useMagicKeys","useManualRefHistory","useMediaControls","useMediaQuery","useMemory","useMounted","useMouse","useMouseInElement","useMousePressed","useMutationObserver","useNavigatorLanguage","useNetwork","useObjectUrl","useOffsetPagination","useOnline","usePageLeave","useParallax","useParentElement","usePerformanceObserver","usePermission","usePointer","usePointerLock","usePointerSwipe","usePreferredColorScheme","usePreferredContrast","usePreferredDark","usePreferredLanguages","usePreferredReducedMotion","usePreferredReducedTransparency","usePrevious","useRafFn","useRefHistory","useResizeObserver","useScreenOrientation","useScreenSafeArea","useScriptTag","useScroll","useScrollLock","useSessionStorage","useShare","useSorted","useSpeechRecognition","useSpeechSynthesis","useSSRWidth","useStepper","useStorageAsync","useStyleTag","useSupported","useSwipe","useTemplateRefsList","useTextareaAutosize","useTextDirection","useTextSelection","useThrottledRefHistory","useThrottleFn","useTimeAgo","useTimeout","useTimeoutFn","useTimeoutPoll","useTimestamp","useTitle","useToggle","useTransition","useUrlSearchParams","useUserMedia","useVibrate","useVirtualList","useVModel","useVModels","useWakeLock","useWebNotification","useWebSocket","useWebWorker","useWebWorkerFn","useWindowFocus","useWindowScroll","useWindowSize","watchArray","watchAtMost","watchDebounced","debouncedWatch","watchDeep","watchIgnorable","ignorableWatch","watchImmediate","watchOnce","watchPausable","pausableWatch","watchThrottled","throttledWatch","watchTriggerable","watchWithFilter","whenever","getCache","setCache","deleteCache","clearCache","formatSiteData","jumpLink","formatNumber","sleep","getSiteData","formatTime","formatDuration","formatInterval","useStatusStore","defineStore","acceptHMRUpdate","usePinia","storeToRefs","piniaPluginPersistedstate","useTransparentPwaIcon","useMaskablePwaIcon","useFaviconPwaIcon","useApplePwaIcon","useAppleSplashScreenPwaIcon","useColorMode","useAdd","useAfter","useAry","useAssign","useAssignIn","useAssignInWith","useAssignWith","useAt","useAttempt","useBefore","useBind","useBindAll","useBindKey","useCamelCase","useCapitalize","useCastArray","useCeil","useChain","useChunk","useClamp","useClone","useCloneDeep","useCloneDeepWith","useCloneWith","useCompact","useConcat","useCond","useConforms","useConformsTo","useConstant","useCountBy","useCreate","useCurry","useCurryRight","useDebounce","useDeburr","useDefaultTo","useDefaults","useDefaultsDeep","useDefer","useDelay","useDifference","useDifferenceBy","useDifferenceWith","useDivide","useDrop","useDropRight","useDropRightWhile","useDropWhile","useEach","useEachRight","useEndsWith","useEntries","useEntriesIn","useEq","useEscape","useEscapeRegExp","useEvery","useExtend","useExtendWith","useFill","useFilter","useFind","useFindIndex","useFindKey","useFindLast","useFindLastIndex","useFindLastKey","useFirst","useFlatMap","useFlatMapDeep","useFlatMapDepth","useFlatten","useFlattenDeep","useFlattenDepth","useFlip","useFloor","useFlow","useFlowRight","useForEach","useForEachRight","useForIn","useForInRight","useForOwn","useForOwnRight","useFromPairs","useFunctions","useFunctionsIn","useGet","useGroupBy","useGt","useGte","useHas","useHasIn","useIdentity","useInRange","useIncludes","useIndexOf","useInitial","useIntersection","useIntersectionBy","useIntersectionWith","useInvert","useInvertBy","useInvoke","useInvokeMap","isArguments","isArray","isArrayBuffer","isArrayLike","isArrayLikeObject","isBoolean","isBuffer","isDate","isElement","isEmpty","isEqual","isEqualWith","isError","isFinite","isFunction","isInteger","isLength","isMap","isMatch","isMatchWith","isNaN","isNative","isNil","isNull","isNumber","isObject","isObjectLike","isPlainObject","isRegExp","isSafeInteger","isSet","isString","isSymbol","isTypedArray","isUndefined","isWeakMap","isWeakSet","useIteratee","useJoin","useKebabCase","useKeyBy","useKeys","useKeysIn","useLast","useLastIndexOf","useLowerCase","useLowerFirst","useLt","useLte","useMap","useMapKeys","useMapValues","useMatches","useMatchesProperty","useMax","useMaxBy","useMean","useMeanBy","useMemoize","useMerge","useMergeWith","useMethod","useMethodOf","useMin","useMinBy","useMixin","useMultiply","useNegate","useNoop","useNow","useNth","useNthArg","useOmit","useOmitBy","useOnce","useOrderBy","useOver","useOverArgs","useOverEvery","useOverSome","usePad","usePadEnd","usePadStart","useParseInt","usePartial","usePartialRight","usePartition","usePick","usePickBy","useProperty","usePropertyOf","usePull","usePullAll","usePullAllBy","usePullAllWith","usePullAt","useRandom","useRange","useRangeRight","useRearg","useReduce","useReduceRight","useReject","useRemove","useRepeat","useReplace","useRest","useResult","useReverse","useRound","useSample","useSampleSize","useSet","useSetWith","useShuffle","useSize","useSlice","useSnakeCase","useSome","useSortBy","useSortedIndex","useSortedIndexBy","useSortedIndexOf","useSortedLastIndex","useSortedLastIndexBy","useSortedLastIndexOf","useSortedUniq","useSortedUniqBy","useSplit","useSpread","useStartCase","useStartsWith","useStubArray","useStubFalse","useStubObject","useStubString","useStubTrue","useSubtract","useSum","useSumBy","useTail","useTake","useTakeRight","useTakeRightWhile","useTakeWhile","useTap","useTemplate","useThrottle","useTimes","useToArray","useToFinite","useToInteger","useToLength","useToLower","useToNumber","useToPairs","useToPairsIn","useToPath","useToPlainObject","useToSafeInteger","useToString","useToUpper","useTransform","useTrim","useTrimEnd","useTrimStart","useTruncate","useUnary","useUnescape","useUnion","useUnionBy","useUnionWith","useUniq","useUniqBy","useUniqWith","useUniqueId","useUnset","useUnzip","useUnzipWith","useUpdate","useUpdateWith","useUpperCase","useUpperFirst","useValues","useValuesIn","useWithout","useWords","useWrap","useXor","useXorBy","useXorWith","useZip","useZipObject","useZipObjectDeep","useZipWith","useI18n","useRouteBaseName","useLocalePath","useLocaleRoute","useSwitchLocalePath","useLocaleHead","useBrowserLocale","useCookieLocale","useSetI18nParams","defineI18nRoute","defineI18nLocale","defineI18nConfig","useNuxtDevTools","useNitroApp","useRuntimeConfig","useAppConfig","defineNitroPlugin","nitroPlugin","defineCachedFunction","defineCachedEventHandler","cachedFunction","cachedEventHandler","useStorage","defineRenderHandler","defineRouteMeta","getRouteRules","useEvent","defineTask","runTask","defineNitroErrorHandler","appendCorsHeaders","appendCorsPreflightHeaders","appendHeader","appendHeaders","appendResponseHeader","appendResponseHeaders","assertMethod","callNodeListener","clearResponseHeaders","clearSession","createApp","createAppEventHandler","createError","createEvent","createEventStream","createRouter","defaultContentType","defineEventHandler","defineLazyEventHandler","defineNodeListener","defineNodeMiddleware","defineRequestMiddleware","defineResponseMiddleware","defineWebSocket","defineWebSocketHandler","deleteCookie","dynamicEventHandler","eventHandler","fetchWithEvent","fromNodeMiddleware","fromPlainHandler","fromWebHandler","getCookie","getHeader","getHeaders","getMethod","getProxyRequestHeaders","getQuery","getRequestFingerprint","getRequestHeader","getRequestHeaders","getRequestHost","getRequestIP","getRequestPath","getRequestProtocol","getRequestURL","getRequestWebStream","getResponseHeader","getResponseHeaders","getResponseStatus","getResponseStatusText","getRouterParam","getRouterParams","getSession","getValidatedQuery","getValidatedRouterParams","handleCacheHeaders","handleCors","isCorsOriginAllowed","isError","isEvent","isEventHandler","isMethod","isPreflightRequest","isStream","isWebResponse","lazyEventHandler","parseCookies","promisifyNodeListener","proxyRequest","readBody","readFormData","readMultipartFormData","readRawBody","readValidatedBody","removeResponseHeader","sanitizeStatusCode","sanitizeStatusMessage","sealSession","send","sendError","sendIterable","sendNoContent","sendProxy","sendRedirect","sendStream","sendWebResponse","serveStatic","setCookie","setHeader","setHeaders","setResponseHeader","setResponseHeaders","setResponseStatus","splitCookiesString","toEventHandler","toNodeListener","toPlainHandler","toWebHandler","toWebRequest","unsealSession","updateSession","useBase","useSession","writeEarlyHints","__buildAssetsURL","__publicAssetsURL","defineAppConfig","defineI18nLocale","defineI18nConfig","signJwt","verifyJwt"].map(i => [i, 'readonly'])),
  },
}
)

export function withNuxt(...customs) {
  return configs
    .clone()
    .append(...customs)
    .onResolved(configs => typegen(configs, { dtsPath: r("./eslint-typegen.d.ts"), augmentFlatConfigUtils: true }))
}

export default withNuxt